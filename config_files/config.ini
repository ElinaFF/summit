# The base configuration of the benchamrk
[Base]
log =           bool ; yes
name =          list_str ; Plausible
label =         str ; None
type =          str ; '.hdf5'
views =         list_str ; all
pathF =         str ; ../Data/
nice =          int ; 0
randomState =   str ; None
nbCores =       int ; 2
full =          bool ; yes
debug =         bool ; yes
add_noise =     bool ; yes
noise_std =     list_float ; 0.0
res_dir =       str ; ../Results/


# All the classification-realted configuration options
[Classification]
multiclassMethod = str ; oneVersusOne
split = float ; 0.8
nbFolds = int ; 2
nbClass = int ; 2
classes = list_str ; yes no
type = list_str ; Monoview Multiview
algos_monoview = list_str ; all
algos_multiview = list_str ; all
statsiter = int ; 2
metrics = list_str ; all
metric_princ = str ; f1_score
HPS_type = str ; randomizedSearch
HPS_iter = int ; 2



#####################################
# The Monoview Classifier arguments #
#####################################

[RandomForest]
n_estimators = list_int ; 25
max_depth = list_int ; 3
criterion = list_str ; entropy

[SVMLinear]
C = list_float ; 1

[SVMRBF]
C = list_float ; 1

[SVMPoly]
C = list_float ; 1
degree = list_int ; 2

[Adaboost]
n_estimators = list_int ; 50
base_estimator = list_str ; DecisionTreeClassifier

[AdaboostPregen]
n_estimators = list_int ; 50
base_estimator = list_str ; DecisionTreeClassifier
n_stumps = list_int ; 1

[AdaboostGraalpy]
n_iterations = list_int ; 50
n_stumps = list_int ; 1

[DecisionTree]
max_depth = list_int ; 10
criterion = list_str ; gini
splitter = list_str ; best

[DecisionTreePregen]
max_depth = list_int ; 10
criterion = list_str ; gini
splitter = list_str ; best
n_stumps = list_int ; 1

[SGD]
loss = list_str ; hinge
penalty = list_str ; l2
alpha = list_float ; 0.0001

[KNN]
n_neighbors = list_int ; 5
weights = list_str ; uniform
algorithm = list_str ; auto

[SCM]
model_type = list_str ; conjunction
max_rules = list_int ; 10
p = list_float ; 0.1

[SCMPregen]
model_type = list_str ; conjunction
max_rules = list_int ; 10
p = list_float ; 0.1
n_stumps = list_int ; 1

[CQBoost]
mu = list_float ; 0.01
epsilon = list_float ; 1e-06
n_max_iterations = list_int ; 5
n_stumps = list_int ; 1

[CGDesc]
n_max_iterations = list_int ; 10
n_stumps = list_int ; 1

[CBBoost]
n_max_iterations = list_int ; 10
n_stumps = list_int ; 1

[CGDescTree]
n_max_iterations = list_int ; 10
n_stumps = list_int ; 1
max_depth = list_int ; 2

[MinCQGraalpy]
mu = list_float ; 0.01
n_stumps_per_attribute = list_int ; 1

[MinCQGraalpyTree]
mu = list_float ; 0.01
n_stumps_per_attribute = list_int ; 1
max_depth = list_int ; 2

[CQBoostTree]
mu = list_float ; 0.01
epsilon = list_float ; 1e-06
n_max_iterations = list_int ; 5
n_stumps = list_int ; 1
max_depth = list_int ; 2

[SCMPregenTree]
max_rules = list_int ; 5
model_type = list_str ; conjunction
n_stumps = list_int ; 1
max_depth = list_int ; 2

[AdaboostPregenTree]
n_estimators = list_int ; 50
base_estimator = list_str ; DecisionTreeClassifier
n_stumps = list_int ; 1
max_depth = list_int ; 2

[Lasso]
alpha = list_float ; 1
max_iter = list_int ; 2

[GradientBoosting]
n_estimators = list_int ; 2

[MinCQ]
mu = list_float ; 0.01
n_stumps_per_attribute = list_int ; 1


######################################
# The Multiview Classifier arguments #
######################################

#TODO